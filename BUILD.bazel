load("@rules_cc//cc:defs.bzl", "cc_library")

licenses(["notice"])  # LGPL 2.1

exports_files(["COPYING"])

filegroup(
    name = "test_headers",
    srcs = [
        "pthread.h",
        "sched.h",
        "semaphore.h",
    ],
    visibility = ["//visibility:public"],
)

config_setting(
    name = "platform_windows",
    constraint_values = [
        "@platforms//os:windows",
    ],
)

PTHREAD_TEXTUAL_HEADERS = [
    "private.c",
    "ptw32_MCS_lock.c",
    "ptw32_is_attr.c",
    "ptw32_processInitialize.c",
    "ptw32_processTerminate.c",
    "ptw32_threadStart.c",
    "ptw32_threadDestroy.c",
    "ptw32_tkAssocCreate.c",
    "ptw32_tkAssocDestroy.c",
    "ptw32_callUserDestroyRoutines.c",
    "ptw32_semwait.c",
    "ptw32_timespec.c",
    "ptw32_relmillisecs.c",
    "ptw32_throw.c",
    "ptw32_getprocessors.c",
    "attr.c",
    "pthread_attr_init.c",
    "pthread_attr_destroy.c",
    "pthread_attr_getdetachstate.c",
    "pthread_attr_setdetachstate.c",
    "pthread_attr_getstackaddr.c",
    "pthread_attr_setstackaddr.c",
    "pthread_attr_getstacksize.c",
    "pthread_attr_setstacksize.c",
    "pthread_attr_getscope.c",
    "pthread_attr_setscope.c",
    "barrier.c",
    "pthread_barrier_init.c",
    "pthread_barrier_destroy.c",
    "pthread_barrier_wait.c",
    "pthread_barrierattr_init.c",
    "pthread_barrierattr_destroy.c",
    "pthread_barrierattr_getpshared.c",
    "pthread_barrierattr_setpshared.c",
    "cancel.c",
    "pthread_setcancelstate.c",
    "pthread_setcanceltype.c",
    "pthread_testcancel.c",
    "pthread_cancel.c",
    "cleanup.c",
    "condvar.c",
    "ptw32_cond_check_need_init.c",
    "pthread_condattr_init.c",
    "pthread_condattr_destroy.c",
    "pthread_condattr_getpshared.c",
    "pthread_condattr_setpshared.c",
    "pthread_cond_init.c",
    "pthread_cond_destroy.c",
    "pthread_cond_wait.c",
    "pthread_cond_signal.c",
    "create.c",
    "dll.c",
    "autostatic.c",
    "errno.c",
    "exit.c",
    "pthread_exit.c",
    "fork.c",
    "global.c",
    "misc.c",
    "pthread_kill.c",
    "pthread_once.c",
    "pthread_self.c",
    "pthread_equal.c",
    "pthread_setconcurrency.c",
    "pthread_getconcurrency.c",
    "ptw32_new.c",
    "ptw32_calloc.c",
    "ptw32_reuse.c",
    "w32_CancelableWait.c",
    "mutex.c",
    "ptw32_mutex_check_need_init.c",
    "pthread_mutex_init.c",
    "pthread_mutex_destroy.c",
    "pthread_mutexattr_init.c",
    "pthread_mutexattr_destroy.c",
    "pthread_mutexattr_getpshared.c",
    "pthread_mutexattr_setpshared.c",
    "pthread_mutexattr_settype.c",
    "pthread_mutexattr_gettype.c",
    "pthread_mutexattr_setrobust.c",
    "pthread_mutexattr_getrobust.c",
    "pthread_mutex_lock.c",
    "pthread_mutex_timedlock.c",
    "pthread_mutex_unlock.c",
    "pthread_mutex_trylock.c",
    "pthread_mutex_consistent.c",
    "nonportable.c",
    "pthread_mutexattr_setkind_np.c",
    "pthread_mutexattr_getkind_np.c",
    "pthread_getw32threadhandle_np.c",
    "pthread_getunique_np.c",
    "pthread_delay_np.c",
    "pthread_num_processors_np.c",
    "pthread_win32_attach_detach_np.c",
    "pthread_timechange_handler_np.c",
    "rwlock.c",
    "ptw32_rwlock_check_need_init.c",
    "ptw32_rwlock_cancelwrwait.c",
    "pthread_rwlock_init.c",
    "pthread_rwlock_destroy.c",
    "pthread_rwlockattr_init.c",
    "pthread_rwlockattr_destroy.c",
    "pthread_rwlockattr_getpshared.c",
    "pthread_rwlockattr_setpshared.c",
    "pthread_rwlock_rdlock.c",
    "pthread_rwlock_timedrdlock.c",
    "pthread_rwlock_wrlock.c",
    "pthread_rwlock_timedwrlock.c",
    "pthread_rwlock_unlock.c",
    "pthread_rwlock_tryrdlock.c",
    "pthread_rwlock_trywrlock.c",
    "sched.c",
    "pthread_attr_setschedpolicy.c",
    "pthread_attr_getschedpolicy.c",
    "pthread_attr_setschedparam.c",
    "pthread_attr_getschedparam.c",
    "pthread_attr_setinheritsched.c",
    "pthread_attr_getinheritsched.c",
    "pthread_setschedparam.c",
    "pthread_getschedparam.c",
    "sched_get_priority_max.c",
    "sched_get_priority_min.c",
    "sched_setscheduler.c",
    "sched_getscheduler.c",
    "sched_yield.c",
    "semaphore.c",
    "sem_init.c",
    "sem_destroy.c",
    "sem_trywait.c",
    "sem_wait.c",
    "sem_timedwait.c",
    "sem_post.c",
    "sem_post_multiple.c",
    "sem_getvalue.c",
    "sem_open.c",
    "sem_close.c",
    "sem_unlink.c",
    "signal.c",
    "spin.c",
    "ptw32_spinlock_check_need_init.c",
    "pthread_spin_init.c",
    "pthread_spin_destroy.c",
    "pthread_spin_lock.c",
    "pthread_spin_unlock.c",
    "pthread_spin_trylock.c",
    "sync.c",
    "pthread_detach.c",
    "pthread_join.c",
    "tsd.c",
    "pthread_key_create.c",
    "pthread_key_delete.c",
    "pthread_setspecific.c",
    "pthread_getspecific.c",
]

# Convenience alias should you want to use "@pthread_windows"
# without having to type "@pthread_windows//:pthread".
alias(
    name = "pthread_windows",
    actual = ":pthread",
    visibility = ["//visibility:public"],
)

test_suite(
    name = "all_tests",
    tests = [
        "//tests:all_tests",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "pthread",
    srcs = select({
        ":platform_windows": ["pthread.c"],
        "//conditions:default": [],
    }),
    defines = select({
        ":platform_windows": [
            "PTW32_STATIC_LIB=1",
        ],
        "//conditions:default": [],
    }),
    linkopts = select({
        ":platform_windows": [],
        "//conditions:default": [
            "-pthread",
        ],
    }),
    linkstatic = True,
    textual_hdrs = PTHREAD_TEXTUAL_HEADERS,
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "headers",
    hdrs = [
        "config.h",
        "context.h",
        "implement.h",
        "need_errno.h",
        "pthread.h",
        "sched.h",
        "semaphore.h",
    ],
    visibility = ["//visibility:public"],
)

cc_library(
    name = "attr",
    srcs = [
        "pthread_attr_destroy.c",
        "pthread_attr_getdetachstate.c",
        "pthread_attr_getscope.c",
        "pthread_attr_getstackaddr.c",
        "pthread_attr_getstacksize.c",
        "pthread_attr_init.c",
        "pthread_attr_setdetachstate.c",
        "pthread_attr_setscope.c",
        "pthread_attr_setstackaddr.c",
        "pthread_attr_setstacksize.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "barrier",
    srcs = [
        "pthread_barrier_destroy.c",
        "pthread_barrier_init.c",
        "pthread_barrier_wait.c",
        "pthread_barrierattr_destroy.c",
        "pthread_barrierattr_getpshared.c",
        "pthread_barrierattr_init.c",
        "pthread_barrierattr_setpshared.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "cancel",
    srcs = [
        "pthread_cancel.c",
        "pthread_setcancelstate.c",
        "pthread_setcanceltype.c",
        "pthread_testcancel.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "condvar",
    srcs = [
        "pthread_cond_destroy.c",
        "pthread_cond_init.c",
        "pthread_cond_signal.c",
        "pthread_cond_wait.c",
        "pthread_condattr_destroy.c",
        "pthread_condattr_getpshared.c",
        "pthread_condattr_init.c",
        "pthread_condattr_setpshared.c",
        "ptw32_cond_check_need_init.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "exit",
    srcs = [
        "pthread_exit.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "misc",
    srcs = [
        "pthread_equal.c",
        "pthread_getconcurrency.c",
        "pthread_kill.c",
        "pthread_once.c",
        "pthread_self.c",
        "pthread_setconcurrency.c",
        "ptw32_MCS_lock.c",
        "ptw32_calloc.c",
        "ptw32_new.c",
        "ptw32_relmillisecs.c",
        "ptw32_reuse.c",
        "w32_CancelableWait.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "mutex",
    srcs = [
        "pthread_mutex_consistent.c",
        "pthread_mutex_destroy.c",
        "pthread_mutex_init.c",
        "pthread_mutex_lock.c",
        "pthread_mutex_timedlock.c",
        "pthread_mutex_trylock.c",
        "pthread_mutex_unlock.c",
        "pthread_mutexattr_destroy.c",
        "pthread_mutexattr_getpshared.c",
        "pthread_mutexattr_getrobust.c",
        "pthread_mutexattr_gettype.c",
        "pthread_mutexattr_init.c",
        "pthread_mutexattr_setpshared.c",
        "pthread_mutexattr_setrobust.c",
        "pthread_mutexattr_settype.c",
        "ptw32_mutex_check_need_init.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "nonportable",
    srcs = [
        "pthread_delay_np.c",
        "pthread_getunique_np.c",
        "pthread_getw32threadhandle_np.c",
        "pthread_mutexattr_getkind_np.c",
        "pthread_mutexattr_setkind_np.c",
        "pthread_num_processors_np.c",
        "pthread_timechange_handler_np.c",
        "pthread_win32_attach_detach_np.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "private",
    srcs = [
        "ptw32_callUserDestroyRoutines.c",
        "ptw32_getprocessors.c",
        "ptw32_is_attr.c",
        "ptw32_processInitialize.c",
        "ptw32_processTerminate.c",
        "ptw32_semwait.c",
        "ptw32_threadDestroy.c",
        "ptw32_threadStart.c",
        "ptw32_throw.c",
        "ptw32_timespec.c",
        "ptw32_tkAssocCreate.c",
        "ptw32_tkAssocDestroy.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "rwlock",
    srcs = [
        "pthread_rwlock_destroy.c",
        "pthread_rwlock_init.c",
        "pthread_rwlock_rdlock.c",
        "pthread_rwlock_timedrdlock.c",
        "pthread_rwlock_timedwrlock.c",
        "pthread_rwlock_tryrdlock.c",
        "pthread_rwlock_trywrlock.c",
        "pthread_rwlock_unlock.c",
        "pthread_rwlock_wrlock.c",
        "pthread_rwlockattr_destroy.c",
        "pthread_rwlockattr_getpshared.c",
        "pthread_rwlockattr_init.c",
        "pthread_rwlockattr_setpshared.c",
        "ptw32_rwlock_cancelwrwait.c",
        "ptw32_rwlock_check_need_init.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "sched",
    srcs = [
        "pthread_attr_getinheritsched.c",
        "pthread_attr_getschedparam.c",
        "pthread_attr_getschedpolicy.c",
        "pthread_attr_setinheritsched.c",
        "pthread_attr_setschedparam.c",
        "pthread_attr_setschedpolicy.c",
        "pthread_getschedparam.c",
        "pthread_setschedparam.c",
        "sched_get_priority_max.c",
        "sched_get_priority_min.c",
        "sched_getscheduler.c",
        "sched_setscheduler.c",
        "sched_yield.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "semaphore",
    srcs = [
        "sem_close.c",
        "sem_destroy.c",
        "sem_getvalue.c",
        "sem_init.c",
        "sem_open.c",
        "sem_post.c",
        "sem_post_multiple.c",
        "sem_timedwait.c",
        "sem_trywait.c",
        "sem_unlink.c",
        "sem_wait.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "spin",
    srcs = [
        "pthread_spin_destroy.c",
        "pthread_spin_init.c",
        "pthread_spin_lock.c",
        "pthread_spin_trylock.c",
        "pthread_spin_unlock.c",
        "ptw32_spinlock_check_need_init.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "sync",
    srcs = [
        "pthread_detach.c",
        "pthread_join.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "tsd",
    srcs = [
        "pthread_getspecific.c",
        "pthread_key_create.c",
        "pthread_key_delete.c",
        "pthread_setspecific.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)

cc_library(
    name = "dll",
    srcs = [
        "dll.c",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":headers",
    ],
)
